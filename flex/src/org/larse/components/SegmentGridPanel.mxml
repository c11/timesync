<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:parsley="http://www.spicefactory.org/parsley"
		 creationComplete="init(event)"
		 width="400" height="300">
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="plot_modified",type="org.larse.events.PlotEvent")]
		[ManagedEvents("plot_modified")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import mx.collections.ArrayCollection;
			import spark.skins.spark.DefaultGridItemRenderer;
			import org.larse.renderer.TsDataGridItemRender;
			import org.larse.tsclass.TsSegment;
			
			import spark.components.Application;
			import org.larse.components.VertexGridTitleWindow;
			import org.larse.model.PlotModel;
			
			[Inject]
			public var model:PlotModel;
			
			[Bindable]
			public var segments:ArrayCollection = new ArrayCollection();
			
			private var vertexWindow:VertexGridTitleWindow;
			
			protected function openVertex(event:MouseEvent):void
			{
				if (model.currentPlot == null)
					return;
				
				//Alert.show("open vertices");
				vertexWindow = new VertexGridTitleWindow();
				vertexWindow.title = "Vertices";
				vertexWindow.addEventListener(CloseEvent.CLOSE, onClose);
				
				vertexWindow.vertices = model.currentPlot.vertices;
				
				PopUpManager.addPopUp(vertexWindow, this.parent.parent);
				PopUpManager.centerPopUp(vertexWindow);
			}
			
			private function onClose(event:CloseEvent):void {
				vertexWindow.removeEventListener(CloseEvent.CLOSE, onClose);
				PopUpManager.removePopUp(event.currentTarget as IFlexDisplayObject);
				segments.refresh();
				model.plotModified();
			}
			
			protected function init(event:FlexEvent):void
			{
				//this.titleDisplay.addEventListener(MouseEvent.CLICK, openVertex);
			}
			
			private function renderFunction(item:Object, column:GridColumn):ClassFactory {
				var v:TsSegment = item as TsSegment;
				if (v==null || v.complete)
					return new ClassFactory(DefaultGridItemRenderer);
				else
					return new ClassFactory(TsDataGridItemRender);
			}
			
		]]>
	</fx:Script>
	
	<s:DataGrid id="segmentDG" width="100%" height="100%"
				dataProvider="{segments}" 
				sortableColumns="false"
				editable="true" >
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="startImage" 
							  headerText="Start" 
							  width="70"
							  itemRendererFunction="renderFunction"
							  editable="false"/>
				<s:GridColumn dataField="endImage" 
							  headerText="End" 
							  width="70"
							  itemRendererFunction="renderFunction"
							  editable="false"/>
				<s:GridColumn dataField="changeProcess" 
							  headerText="Change Process"
							  itemRendererFunction="renderFunction"
							  itemEditor="org.larse.components.ChangeProcessEditor2"/>
				<!--
				<s:GridColumn dataField="processConfidence" 
							  headerText="Process Confidence"
							  itemEditor="org.larse.components.ConfidenceEditor"/>
				-->
				<s:GridColumn dataField="isEphemeral" 
							  headerText="Ephemeral"
							  width="80"
							  itemRenderer="org.larse.renderer.TsDataGridItemCheckBoxRender"
							  editable="false"
							  >
					<!--
					<s:itemEditor>
						<fx:Component>
							<s:GridItemEditor>
								<s:CheckBox selected="@{value}" horizontalCenter="0"/>
							</s:GridItemEditor>
						</fx:Component>
					</s:itemEditor>
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<s:Rect top="0" bottom="0" right="0" left="0">
									<s:fill>
										<s:SolidColor color="{data.complete?#FFFFFF:#F77F7F}" alpha="0.5"/>
									</s:fill>
								</s:Rect>
								<s:CheckBox label="" selected="@{data.isEphemeral}" horizontalCenter="0"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
					-->
				</s:GridColumn>	
				<!--
				<s:GridColumn dataField="confidenceScore" 
							  headerText="Score"
							  width="50"
							  itemRendererFunction="renderFunction"
							  editable="false"/>
				-->
			</s:ArrayList>
		</s:columns >
		<s:typicalItem>
			<fx:Object startImage="1984  "
					   endImage="1984  "
					   changeProcess="Change Process"
					   isEphemeral="false"/>
		</s:typicalItem>
	</s:DataGrid> 
</s:Panel>