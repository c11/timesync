<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"
				xmlns:parsley="http://www.spicefactory.org/parsley"
				autoDrawBackground="true">
	
	<fx:Declarations>
		<parsley:Configure/>
	</fx:Declarations>
	
	<fx:Metadata>
		[Event(name="chip_sizescale_changed",type="org.larse.events.TimeSyncEvent")]
		[Event(name="vertex_toggled", type="org.larse.events.VertexEvent")]
		[Event(name="plot_spectral_loaded",type="org.larse.events.PlotEvent")]
		[ManagedEvents("plot_spectral_loaded,chip_sizescale_changed, vertex_toggled")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			
			import org.larse.events.PlotEvent;
			import org.larse.events.TimeSyncEvent;
			import org.larse.model.GlobalModel;
			import org.larse.model.PlotModel;
			import org.larse.tsclass.ImageChip;
			import org.larse.vos.Vertex;
			
			
			private var img_width:int = 255;
			private var img_height:int = 255;
			
			[Bindable]
			private var _x:Number = 0;
			
			[Bindable]
			private var _y:Number = 0;
			
			[Bindable]
			private var chip:ImageChip = null;
			
			[Bindable]
			[Inject]
			public var global:GlobalModel;
			
			[Inject]
			public var plotModel:PlotModel;
			
			override public function set data(value:Object):void {
				super.data = value;
				var c:ImageChip = value as ImageChip;
				chip = c;
				if (c && c.isVertex) {
					imgLabel.setStyle("fontWeight", "bold");
				}
				else {
					imgLabel.setStyle("fontWeight", "normal");
					//_isVertex = false;
				}
			}
			
			[MessageHandler(selector="chip_sizescale_changed")]
			public function applyScale(event:TimeSyncEvent):void
			{
				trace("chip_sizescale_changed");
				image.scaleX = global.scale;
				image.scaleY = global.scale;
				//image.x = (global.view_size - img_width*global.scale)/2;
				//image.y = (global.view_size - img_height*global.scale)/2;
				_x = (global.view_size - img_width*global.scale)/2.0;
				_y = (global.view_size - img_height*global.scale)/2.0;
				trace("scale = " + global.scale);
			}
			
			protected function onImageReady(event:FlexEvent):void
			{
//				trace("width = " + event.currentTarget.sourceWidth);
//				trace("height = " + event.currentTarget.sourceHeight);
				img_width = event.currentTarget.sourceWidth;
				img_height = event.currentTarget.sourceHeight;
				
				_x = (global.view_size - img_width * global.scale) / 2.0;
				_y = (global.view_size - img_height * global.scale) / 2.0;

				
//				trace("x = " + image.x);
//				trace("y = " + image.y);
			}
			
			protected function onMouseWheel(event:MouseEvent):void
			{
				var d:int = event.delta;
				var t_scale:Number = global.scale + d*0.05;
				t_scale = t_scale < 1.0 ? 1.0 : t_scale;
				t_scale = t_scale > 50.0 ? 50.0 : t_scale; 
				global.scale = t_scale;
				_x = (global.view_size - img_width * global.scale) / 2.0;
				_y = (global.view_size - img_height * global.scale) / 2.0;
				dispatchEvent(new TimeSyncEvent(TimeSyncEvent.CHIP_SIZESCALE_CHANGED));
				event.preventDefault();
			}
			
			protected function onImageClicked(event:MouseEvent):void
			{
				// TODO Auto-generated method stub
				if (true) {
					var ic:ImageChip = data as ImageChip;
					ic.isVertex = !ic.isVertex;
					
					//who is the interpreter, this is for superuser
					var interp:int = global.examinee_id > 0 ? global.examinee_id : global.interpreter.user_id; 
					
					var v:Vertex = new Vertex(global.project_id, global.tsa, 
						                      ic.plotid, interp, 
											  ic.year, ic.julday);
					if (ic.isVertex) {
						trace("Add vertex: " + v.label);
						plotModel.currentPlot.addVertex(v);
					}
					else {
						trace("Remove vertex: " + v.label);
						plotModel.currentPlot.removeVertex(v);
					}
					dispatchEvent(new PlotEvent(PlotEvent.PLOT_SPECTRAL_LOADED));
				}
			}
			
		]]>
	</fx:Script>

		<s:Group width="{global.view_size+30}" 
				 height="{global.view_size+30}">
			<s:Rect width="{global.view_size+30}" 
					height="{global.view_size+30}" 
					radiusX="10" radiusY="10"
					visible="{chip.isVertex}">
				<s:fill>
					<s:SolidColor color="#FFFFFF"/>
				</s:fill>
				<s:stroke>
					<s:SolidColorStroke caps="round" color="#FF0000" 
										joints="round" 
										miterLimit="4"
										weight="3"/>
				</s:stroke>
			</s:Rect>
			<!--
			<s:Label width="100%" height="100%" textAlign="center" verticalAlign="middle" text="Loading ..."/>
			-->
			<s:VGroup width="100%" 
					  height="100%"
					  horizontalAlign="center" 
					  paddingLeft="5" paddingTop="5" 
					  paddingRight="5" paddingBottom="5">
				<s:Scroller width="{global.view_size}" 
							height="{global.view_size}" 
							horizontalScrollPolicy="off" 
							verticalScrollPolicy="off">
						<s:Group width="100%" height="100%">
							<s:Image id="image"
							     x = "{_x}"
								 y = "{_y}"
								 scaleX="{global.scale}" 
								 scaleY="{global.scale}"
								 source="{data.chipUrl}" 
								 toolTip="{data.description}"
								 ready="onImageReady(event)"
								 doubleClickEnabled="true"
								 doubleClick="onImageClicked(event)"
								 mouseWheel="onMouseWheel(event)"/>
							
							<!-- a 3x3 window -->
							<s:Rect x="{global.view_size/2.0+(global.plot_size-global.plot_size*global.scale)/2.0}" 
									y="{global.view_size/2.0+(global.plot_size-global.plot_size*global.scale)/2.0}"
									width="{global.plot_size*global.scale}" height="{global.plot_size*global.scale}">
								<s:stroke>
									<s:SolidColorStroke color="#000000" weight="1"/>
								</s:stroke>
							</s:Rect>
							
							<!-- center pixel -->
							<s:Rect x="{global.view_size/2.0+(global.plot_size-global.plot_size*global.scale)/2.0}" 
									y="{global.view_size/2.0+(global.plot_size-global.plot_size*global.scale)/2.0}"
									width="{global.plot_size*global.scale}" height="{global.plot_size*global.scale}">
								<s:stroke>
									<s:SolidColorStroke color="#000000" weight="1"/>
								</s:stroke>
							</s:Rect>
							
						</s:Group>
				</s:Scroller>
				<s:Label id="imgLabel" width="100%" 
						 fontWeight="bold" 
						 text="{data.label}"
						 textAlign="center"/>
			</s:VGroup>
		</s:Group>

</s:ItemRenderer>
